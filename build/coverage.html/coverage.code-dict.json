{"/home/travis/build/npmtest/node-npmtest-gulp-newer/test.js":"/* istanbul instrument in package npmtest_gulp_newer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-newer/lib.npmtest_gulp_newer.js":"/* istanbul instrument in package npmtest_gulp_newer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_newer = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_newer = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-newer/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-newer && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_newer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_newer\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_newer.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_newer.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_newer.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_newer.__dirname +\n                    '/lib.npmtest_gulp_newer.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-newer/node_modules/gulp-newer/index.js":"var Transform = require('stream').Transform;\nvar fs = require('fs');\nvar path = require('path');\nvar util = require('util');\nvar glob = require('glob');\n\nvar Q = require('kew');\nvar gutil = require('gulp-util');\n\nvar PluginError = gutil.PluginError;\n\nvar PLUGIN_NAME = 'gulp-newer';\n\nfunction Newer(options) {\n  Transform.call(this, {objectMode: true});\n\n  if (!options) {\n    throw new PluginError(PLUGIN_NAME,\n      'Requires a dest string or options object');\n  }\n\n  if (typeof options === 'string') {\n    options = {dest: options};\n  } else if (options.dest && typeof options.dest !== 'string') {\n    throw new PluginError(PLUGIN_NAME, 'Requires a dest string');\n  }\n\n  if (options.ext && typeof options.ext !== 'string') {\n    throw new PluginError(PLUGIN_NAME, 'Requires ext to be a string');\n  }\n\n  if (options.map && typeof options.map !== 'function') {\n    throw new PluginError(PLUGIN_NAME, 'Requires map to be a function');\n  }\n\n  if (!options.dest && !options.map) {\n    throw new PluginError(PLUGIN_NAME, 'Requires either options.dest or options.map or both');\n  }\n\n  if (options.extra) {\n    if (typeof options.extra === 'string') {\n      options.extra = [options.extra];\n    } else if (!Array.isArray(options.extra)) {\n      throw new PluginError(PLUGIN_NAME, 'Requires options.extra to be a string or array');\n    }\n  }\n\n  /**\n   * Path to destination directory or file.\n   * @type {string}\n   */\n  this._dest = options.dest;\n\n  /**\n   * Optional extension for destination files.\n   * @type {string}\n   */\n  this._ext = options.ext;\n\n  /**\n   * Optional function for mapping relative source files to destination files.\n   * @type {function(string): string}\n   */\n  this._map = options.map;\n\n  /**\n   * Promise for the dest file/directory stats.\n   * @type {[type]}\n   */\n  this._destStats = this._dest ? Q.nfcall(fs.stat, this._dest) : Q.resolve(null);\n\n  /**\n   * If the provided dest is a file, we want to pass through all files if any\n   * one of the source files is newer than the dest.  To support this, source\n   * files need to be buffered until a newer file is found.  When a newer file\n   * is found, buffered source files are flushed (and the `_all` flag is set).\n   * @type {[type]}\n   */\n  this._bufferedFiles = null;\n\n  /**\n   * Indicates that all files should be passed through.  This is set when the\n   * provided dest is a file and we have already encountered a newer source\n   * file.  When true, all remaining source files should be passed through.\n   * @type {boolean}\n   */\n  this._all = false;\n\n  /**\n   * Indicates that there are extra files (configuration files, etc.)\n   * that are not to be fed into the stream, but that should force\n   * all files to be rebuilt if *any* are older than one of the extra\n   * files.\n   */\n  this._extraStats = null;\n\n  if (options.extra) {\n    var extraFiles = [];\n    for (var i = 0; i < options.extra.length; ++i) {\n      extraFiles.push(Q.nfcall(glob, options.extra[i]));\n    }\n    this._extraStats = Q.all(extraFiles)\n      .then(function(fileArrays) {\n        // First collect all the files in all the glob result arrays\n        var allFiles = [];\n        var i;\n        for (i = 0; i < fileArrays.length; ++i) {\n          allFiles = allFiles.concat(fileArrays[i]);\n        }\n        var extraStats = [];\n        for (i = 0; i < allFiles.length; ++i) {\n          extraStats.push(Q.nfcall(fs.stat, allFiles[i]));\n        }\n        return Q.all(extraStats);\n      })\n      .then(function(resolvedStats) {\n        // We get all the file stats here; find the *latest* modification.\n        var latestStat = resolvedStats[0];\n        for (var j = 1; j < resolvedStats.length; ++j) {\n          if (resolvedStats[j].mtime > latestStat.mtime) {\n            latestStat = resolvedStats[j];\n          }\n        }\n        return latestStat;\n      })\n      .fail(function(error) {\n        if (error && error.path) {\n          throw new PluginError(PLUGIN_NAME, 'Failed to read stats for an extra file: ' + error.path);\n        } else {\n          throw new PluginError(PLUGIN_NAME, 'Failed to stat extra files; unknown error: ' + error);\n        }\n      });\n  }\n\n}\nutil.inherits(Newer, Transform);\n\n\n/**\n * Pass through newer files only.\n * @param {File} srcFile A vinyl file.\n * @param {string} encoding Encoding (ignored).\n * @param {function(Error, File)} done Callback.\n */\nNewer.prototype._transform = function(srcFile, encoding, done) {\n  if (!srcFile || !srcFile.stat) {\n    done(new PluginError(PLUGIN_NAME, 'Expected a source file with stats'));\n    return;\n  }\n  var self = this;\n  Q.resolve([this._destStats, this._extraStats])\n    .spread(function(destStats, extraStats) {\n      if ((destStats && destStats.isDirectory()) || self._ext || self._map) {\n        // stat dest/relative file\n        var relative = srcFile.relative;\n        var ext = path.extname(relative);\n        var destFileRelative = self._ext ?\n          relative.substr(0, relative.length - ext.length) + self._ext :\n          relative;\n        if (self._map) {\n          destFileRelative = self._map(destFileRelative);\n        }\n        var destFileJoined = self._dest ?\n          path.join(self._dest, destFileRelative) : destFileRelative;\n        return Q.all([Q.nfcall(fs.stat, destFileJoined), extraStats]);\n      } else {\n        // wait to see if any are newer, then pass through all\n        if (!self._bufferedFiles) {\n          self._bufferedFiles = [];\n        }\n        return [destStats, extraStats];\n      }\n    }).fail(function(err) {\n      if (err.code === 'ENOENT') {\n        // dest file or directory doesn't exist, pass through all\n        return Q.resolve([null, this._extraStats]);\n      } else {\n        // unexpected error\n        return Q.reject(err);\n      }\n    }).spread(function(destFileStats, extraFileStats) {\n      var newer = !destFileStats || srcFile.stat.mtime > destFileStats.mtime;\n      // If *any* extra file is newer than a destination file, then ALL\n      // are newer.\n      if (extraFileStats && extraFileStats.mtime > destFileStats.mtime) {\n        newer = true;\n      }\n      if (self._all) {\n        self.push(srcFile);\n      } else if (!newer) {\n        if (self._bufferedFiles) {\n          self._bufferedFiles.push(srcFile);\n        }\n      } else {\n        if (self._bufferedFiles) {\n          // flush buffer\n          self._bufferedFiles.forEach(function(file) {\n            self.push(file);\n          });\n          self._bufferedFiles.length = 0;\n          // pass through all remaining files as well\n          self._all = true;\n        }\n        self.push(srcFile);\n      }\n      done();\n    }).fail(done).end();\n\n};\n\n\n/**\n * Remove references to buffered files.\n * @param {function(Error)} done Callback.\n */\nNewer.prototype._flush = function(done) {\n  this._bufferedFiles = null;\n  done();\n};\n\n\n/**\n * Only pass through source files that are newer than the provided destination.\n * @param {Object} options An options object or path to destination.\n * @return {Newer} A transform stream.\n */\nmodule.exports = function(options) {\n  return new Newer(options);\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-newer/node_modules/gulp-newer/spec.js":"/* eslint-env mocha */\n\nvar Transform = require('stream').Transform;\nvar fs = require('fs');\nvar path = require('path');\n\nvar chai = require('chai');\nvar gutil = require('gulp-util');\nvar mock = require('mock-fs');\n\nvar newer = require('./index.js');\n\nchai.config.includeStack = true;\n\nvar File = gutil.File;\nvar assert = chai.assert;\n\n/**\n * Test utility function.  Create File instances for each of the provided paths\n * and write to the provided stream.  Call stream.end() when done.\n * @param {stream.Transform} stream Transform stream.\n * @param {Array.<string>} paths Array of file paths.\n */\nfunction write(stream, paths) {\n  paths.forEach(function(filePath) {\n    stream.write(new File({\n      contents: fs.readFileSync(filePath),\n      path: path.resolve(filePath),\n      stat: fs.statSync(filePath)\n    }));\n  });\n  stream.end();\n}\n\ndescribe('newer()', function() {\n\n  it('creates a transform stream', function() {\n    var stream = newer('foo');\n    assert.instanceOf(stream, Transform);\n  });\n\n  it('requires a string dest or an object with the dest property', function() {\n\n    assert.throws(function() {\n      newer();\n    });\n\n    assert.throws(function() {\n      newer(123);\n    });\n\n    assert.throws(function() {\n      newer({});\n    });\n  });\n\n  describe('config.ext', function() {\n\n    it('must be a string', function() {\n\n      assert.throws(function() {\n        newer({dest: 'foo', ext: 1});\n      });\n\n      assert.throws(function() {\n        newer({dest: 'foo', ext: {}});\n      });\n    });\n  });\n\n  describe('config.map', function() {\n\n    it('must be a function', function() {\n      assert.throws(function() {\n        newer({dest: 'foo', map: 1});\n      });\n\n      assert.throws(function() {\n        newer({dest: 'foo', map: 'bar'});\n      });\n    });\n\n    it('makes the dest config optional', function() {\n      assert.doesNotThrow(function() {\n        newer({map: function() {}});\n      });\n    });\n\n  });\n\n  describe('config.extra', function() {\n\n    beforeEach(function() {\n      mock({\n        main: mock.file({\n          content: 'main content',\n          mtime: new Date(1)\n        }),\n        imported: mock.file({\n          content: '2: other content, used by main',\n          mtime: new Date(3)\n        }),\n        collected: mock.file({\n          content: 'main content\\n1: other content, used by main',\n          mtime: new Date(2)\n        })\n      });\n    });\n    afterEach(mock.restore);\n\n    it('must be a string or an array', function() {\n      assert.throws(function() {\n        newer({dest: 'foo', extra: 1});\n      });\n\n      assert.throws(function() {\n        newer({dest: 'foo', extra: function() {}});\n      });\n\n      assert.doesNotThrow(function() {\n        newer({dest: 'foo', extra: 'extra1'});\n      });\n\n      assert.doesNotThrow(function() {\n        newer({dest: 'foo', extra: ['extra1', 'extra2']});\n      });\n    });\n\n    it('must not be passed into stream', function(done) {\n      var stream = newer({dest: 'collected', extra: 'imported'});\n\n      var paths = ['main'];\n\n      stream.on('data', function(file) {\n        assert.notEqual(file.path, path.resolve('imported'));\n      });\n      stream.on('error', done);\n      stream.on('end', done);\n\n      write(stream, paths);\n    });\n\n    it('must let other files through stream if an \"extra\" is newer', function(done) {\n      var stream = newer({dest: 'collected', extra: 'imported'});\n\n      var paths = ['main'];\n\n      var calls = 0;\n      stream.on('data', function(file) {\n        assert.equal(file.path, path.resolve(paths[calls]));\n        ++calls;\n      });\n\n      stream.on('error', done);\n\n      stream.on('end', function() {\n        assert.equal(calls, paths.length);\n        done();\n      });\n\n      write(stream, paths);\n    });\n\n  });\n\n  describe('dest dir that does not exist', function() {\n\n    beforeEach(function() {\n      mock({\n        source1: 'source1 content',\n        source2: 'source2 content',\n        source3: 'source3 content'\n      });\n    });\n    afterEach(mock.restore);\n\n    it('passes through all files', function(done) {\n      var stream = newer('new/dir');\n\n      var paths = ['source1', 'source2', 'source3'];\n\n      var calls = 0;\n      stream.on('data', function(file) {\n        assert.equal(file.path, path.resolve(paths[calls]));\n        ++calls;\n      });\n\n      stream.on('error', done);\n\n      stream.on('end', function() {\n        assert.equal(calls, paths.length);\n        done();\n      });\n\n      write(stream, paths);\n    });\n\n  });\n\n  describe('dest file that does not exist', function() {\n\n    beforeEach(function() {\n      mock({\n        file1: 'file1 content',\n        file2: 'file2 content',\n        file3: 'file3 content',\n        dest: {}\n      });\n    });\n    afterEach(mock.restore);\n\n    it('passes through all files', function(done) {\n      var stream = newer('dest/concat');\n\n      var paths = ['file1', 'file2', 'file3'];\n\n      var calls = 0;\n      stream.on('data', function(file) {\n        assert.equal(file.path, path.resolve(paths[calls]));\n        ++calls;\n      });\n\n      stream.on('error', done);\n\n      stream.on('end', function() {\n        assert.equal(calls, paths.length);\n        done();\n      });\n\n      write(stream, paths);\n    });\n\n  });\n\n  describe('empty dest dir', function() {\n\n    beforeEach(function() {\n      mock({\n        source1: 'source1 content',\n        source2: 'source2 content',\n        source3: 'source3 content',\n        dest: {}\n      });\n    });\n    afterEach(mock.restore);\n\n    it('passes through all files', function(done) {\n      var stream = newer('dest');\n\n      var paths = ['source1', 'source2', 'source3'];\n\n      var calls = 0;\n      stream.on('data', function(file) {\n        assert.equal(file.path, path.resolve(paths[calls]));\n        ++calls;\n      });\n\n      stream.on('error', done);\n\n      stream.on('end', function() {\n        assert.equal(calls, paths.length);\n        done();\n      });\n\n      write(stream, paths);\n    });\n\n  });\n\n  describe('dest dir with one older file', function() {\n\n    beforeEach(function() {\n      mock({\n        file1: 'file1 content',\n        file2: 'file2 content',\n        file3: 'file3 content',\n        dest: {\n          file2: mock.file({\n            content: 'file2 content',\n            mtime: new Date(1)\n          })\n        }\n      });\n    });\n    afterEach(mock.restore);\n\n    it('passes through all files', function(done) {\n      var stream = newer('dest');\n\n      var paths = ['file1', 'file2', 'file3'];\n\n      var calls = 0;\n      stream.on('data', function(file) {\n        assert.equal(file.path, path.resolve(paths[calls]));\n        ++calls;\n      });\n\n      stream.on('error', done);\n\n      stream.on('end', function() {\n        assert.equal(calls, paths.length);\n        done();\n      });\n\n      write(stream, paths);\n    });\n\n  });\n\n  describe('dest dir with one newer file', function() {\n\n    beforeEach(function() {\n      mock({\n        file1: mock.file({\n          content: 'file1 content',\n          mtime: new Date(100)\n        }),\n        file2: mock.file({\n          content: 'file2 content',\n          mtime: new Date(100)\n        }),\n        file3: mock.file({\n          content: 'file3 content',\n          mtime: new Date(100)\n        }),\n        dest: {\n          file2: mock.file({\n            content: 'file2 content',\n            mtime: new Date(200)\n          })\n        }\n      });\n    });\n    afterEach(mock.restore);\n\n    it('passes through two newer files', function(done) {\n      var stream = newer('dest');\n\n      var paths = ['file1', 'file2', 'file3'];\n\n      var calls = 0;\n      stream.on('data', function(file) {\n        assert.notEqual(file.path, path.resolve('file2'));\n        ++calls;\n      });\n\n      stream.on('error', done);\n\n      stream.on('end', function() {\n        assert.equal(calls, paths.length - 1);\n        done();\n      });\n\n      write(stream, paths);\n    });\n\n  });\n\n  describe('dest dir with two newer and one older file', function() {\n\n    beforeEach(function() {\n      mock({\n        file1: mock.file({\n          content: 'file1 content',\n          mtime: new Date(100)\n        }),\n        file2: mock.file({\n          content: 'file2 content',\n          mtime: new Date(100)\n        }),\n        file3: mock.file({\n          content: 'file3 content',\n          mtime: new Date(100)\n        }),\n        dest: {\n          file1: mock.file({\n            content: 'file1 content',\n            mtime: new Date(150)\n          }),\n          file2: mock.file({\n            content: 'file2 content',\n            mtime: new Date(50)\n          }),\n          file3: mock.file({\n            content: 'file3 content',\n            mtime: new Date(150)\n          })\n        }\n      });\n    });\n    afterEach(mock.restore);\n\n    it('passes through one newer file', function(done) {\n      var stream = newer('dest');\n\n      var paths = ['file1', 'file2', 'file3'];\n\n      var calls = 0;\n      stream.on('data', function(file) {\n        assert.equal(file.path, path.resolve('file2'));\n        ++calls;\n      });\n\n      stream.on('error', done);\n\n      stream.on('end', function() {\n        assert.equal(calls, 1);\n        done();\n      });\n\n      write(stream, paths);\n    });\n\n  });\n\n  describe('dest file with first source file newer', function() {\n\n    beforeEach(function() {\n      mock({\n        file1: mock.file({\n          content: 'file1 content',\n          mtime: new Date(200)\n        }),\n        file2: mock.file({\n          content: 'file2 content',\n          mtime: new Date(100)\n        }),\n        file3: mock.file({\n          content: 'file3 content',\n          mtime: new Date(100)\n        }),\n        dest: {\n          output: mock.file({\n            content: 'file2 content',\n            mtime: new Date(150)\n          })\n        }\n      });\n    });\n    afterEach(mock.restore);\n\n    it('passes through all source files', function(done) {\n      var stream = newer('dest/output');\n\n      var paths = ['file1', 'file2', 'file3'];\n\n      var calls = 0;\n      stream.on('data', function(file) {\n        assert.equal(file.path, path.resolve(paths[calls]));\n        ++calls;\n      });\n\n      stream.on('error', done);\n\n      stream.on('end', function() {\n        assert.equal(calls, paths.length);\n        done();\n      });\n\n      write(stream, paths);\n    });\n\n  });\n\n  describe('dest file with second source file newer', function() {\n\n    beforeEach(function() {\n      mock({\n        file1: mock.file({\n          content: 'file1 content',\n          mtime: new Date(100)\n        }),\n        file2: mock.file({\n          content: 'file2 content',\n          mtime: new Date(200)\n        }),\n        file3: mock.file({\n          content: 'file3 content',\n          mtime: new Date(100)\n        }),\n        dest: {\n          output: mock.file({\n            content: 'file2 content',\n            mtime: new Date(150)\n          })\n        }\n      });\n    });\n    afterEach(mock.restore);\n\n    it('passes through all source files', function(done) {\n      var stream = newer('dest/output');\n\n      var paths = ['file1', 'file2', 'file3'];\n\n      var calls = 0;\n      stream.on('data', function(file) {\n        assert.equal(file.path, path.resolve(paths[calls]));\n        ++calls;\n      });\n\n      stream.on('error', done);\n\n      stream.on('end', function() {\n        assert.equal(calls, paths.length);\n        done();\n      });\n\n      write(stream, paths);\n    });\n\n  });\n\n  describe('dest file with last source file newer', function() {\n\n    beforeEach(function() {\n      mock({\n        file1: mock.file({\n          content: 'file1 content',\n          mtime: new Date(100)\n        }),\n        file2: mock.file({\n          content: 'file2 content',\n          mtime: new Date(100)\n        }),\n        file3: mock.file({\n          content: 'file3 content',\n          mtime: new Date(200)\n        }),\n        dest: {\n          output: mock.file({\n            content: 'file2 content',\n            mtime: new Date(150)\n          })\n        }\n      });\n    });\n    afterEach(mock.restore);\n\n    it('passes through all source files', function(done) {\n      var stream = newer('dest/output');\n\n      var paths = ['file1', 'file2', 'file3'];\n\n      var calls = 0;\n      stream.on('data', function(file) {\n        assert.equal(file.path, path.resolve(paths[calls]));\n        ++calls;\n      });\n\n      stream.on('error', done);\n\n      stream.on('end', function() {\n        assert.equal(calls, paths.length);\n        done();\n      });\n\n      write(stream, paths);\n    });\n\n  });\n\n  describe('dest file with no newer source files', function() {\n\n    beforeEach(function() {\n      mock({\n        file1: mock.file({\n          content: 'file1 content',\n          mtime: new Date(100)\n        }),\n        file2: mock.file({\n          content: 'file2 content',\n          mtime: new Date(100)\n        }),\n        file3: mock.file({\n          content: 'file3 content',\n          mtime: new Date(100)\n        }),\n        dest: {\n          output: mock.file({\n            content: 'file2 content',\n            mtime: new Date(150)\n          })\n        }\n      });\n    });\n    afterEach(mock.restore);\n\n    it('passes through no source files', function(done) {\n      var stream = newer('dest/output');\n\n      var paths = ['file1', 'file2', 'file3'];\n\n      var calls = 0;\n      stream.on('data', function() {\n        done(new Error('Expected no source files'));\n        ++calls;\n      });\n\n      stream.on('error', done);\n\n      stream.on('end', function() {\n        assert.equal(calls, 0);\n        done();\n      });\n\n      write(stream, paths);\n    });\n\n  });\n\n  describe('dest file ext and two files', function() {\n\n    beforeEach(function() {\n      mock({\n        'file1.ext1': mock.file({\n          content: 'file1 content',\n          mtime: new Date(100)\n        }),\n        'file2.ext1': mock.file({\n          content: 'file2 content',\n          mtime: new Date(100)\n        }),\n        dest: {\n          'file1.ext2': mock.file({\n            content: 'file1 content',\n            mtime: new Date(100)\n          }),\n          'file2.ext2': mock.file({\n            content: 'file2 content',\n            mtime: new Date(50)\n          })\n        }\n      });\n    });\n    afterEach(mock.restore);\n\n    it('passes through one newer file', function(done) {\n      var stream = newer({dest: 'dest', ext: '.ext2'});\n\n      var paths = ['file1.ext1', 'file2.ext1'];\n\n      var calls = 0;\n      stream.on('data', function(file) {\n        assert.equal(file.path, path.resolve('file2.ext1'));\n        ++calls;\n      });\n\n      stream.on('error', done);\n\n      stream.on('end', function() {\n        assert.equal(calls, 1);\n        done();\n      });\n\n      write(stream, paths);\n    });\n\n  });\n\n  describe('custom mapping between source and dest', function() {\n\n    beforeEach(function() {\n      mock({\n        'file1.ext1': mock.file({\n          content: 'file1 content',\n          mtime: new Date(100)\n        }),\n        'file2.ext1': mock.file({\n          content: 'file2 content',\n          mtime: new Date(100)\n        }),\n        dest: {\n          'file1.ext2': mock.file({\n            content: 'file1 content',\n            mtime: new Date(100)\n          }),\n          'file2.ext2': mock.file({\n            content: 'file2 content',\n            mtime: new Date(50)\n          })\n        }\n      });\n    });\n    afterEach(mock.restore);\n\n    it('passes through one newer file', function(done) {\n      var stream = newer({\n        dest: 'dest',\n        map: function(destPath) {\n          return destPath.replace('.ext1', '.ext2');\n        }\n      });\n\n      var paths = ['file1.ext1', 'file2.ext1'];\n\n      var calls = 0;\n      stream.on('data', function(file) {\n        assert.equal(file.path, path.resolve('file2.ext1'));\n        ++calls;\n      });\n\n      stream.on('error', done);\n\n      stream.on('end', function() {\n        assert.equal(calls, 1);\n        done();\n      });\n\n      write(stream, paths);\n    });\n\n    it('allows people to join to dest themselves', function(done) {\n      var stream = newer({\n        map: function(destPath) {\n          return path.join('dest', destPath.replace('.ext1', '.ext2'));\n        }\n      });\n\n      var paths = ['file1.ext1', 'file2.ext1'];\n\n      var calls = 0;\n      stream.on('data', function(file) {\n        assert.equal(file.path, path.resolve('file2.ext1'));\n        ++calls;\n      });\n\n      stream.on('error', done);\n\n      stream.on('end', function() {\n        assert.equal(calls, 1);\n        done();\n      });\n\n      write(stream, paths);\n    });\n\n  });\n\n  describe('reports errors', function() {\n    beforeEach(function() {\n      mock({\n        'q': mock.file({\n          mtime: new Date(100)\n        }),\n        dest: {}\n      });\n    });\n    afterEach(mock.restore);\n\n    it('in \"data\" handlers', function(done) {\n      var stream = newer('dest');\n\n      var err = new Error('test');\n\n      stream.on('data', function() {\n        throw err;\n      });\n\n      stream.on('error', function(caught) {\n        assert.equal(caught, err);\n        done();\n      });\n\n      write(stream, ['q']);\n    });\n\n  });\n\n});\n"}